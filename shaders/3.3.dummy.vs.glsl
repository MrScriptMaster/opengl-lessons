/*
 * Типичный шейдер имеет следующую структуру
 * Шейдер всегда начинается с декларации о его версии. Затем
 * перечисляются входные и выходные переменные шейдера.
 */
 
/*
 * GLSL поддерживает стандартные типы данных языка С (int, float, double, uint и bool).
 * Кроме них язык вводит векторный и матричный типы данных. Обычно векторы используются
 * для получения доступа к атрибутам, будь то координаты вершины или ее цвет.
 * Матричный тип используются для проведения некоторых математических преобразований для
 * достижения требуемого эффекта при визуализации.
 *
 * Входы и выходы внутри шейдера являются своего рода локальными переменными для него.
 * Тем не менее, если выход одного из шейдеров в конвейере по имени и по типу совпадет со
 * входом далее стоящего от него шейдера, то они по сути объединяться и станут для них
 * одной разделяемой переменной. Этим приемом иногда пользуются: например, вершинный
 * шейдер может просчитывать цвета для фрагментного шейдера.
 *
 * Другим типом объектов в шейдерах являются uniform. По сути они являются глобальными
 * переменными для всех шейдеров и могут читаться из любого шейдера на любом этапе
 * конвейера. Значение uniform можно изменять из основной программы и получать его значение в
 * основной программе.  
 */
 
 #version version_number
in type in_variable_name;
in type in_variable_name;
out type out_variable_name;
uniform type uniform_name;
void main()
{
// process input(s) and do some weird graphics stuff
...
// output processed stuff to output variable
out_variable_name = weird_stuff_we_processed;
}
